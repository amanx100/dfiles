# This is a general haproxy model file
defaults
 mode http
 timeout connect 5000ms
 timeout client 50000ms
 timeout server 50000ms
 timeout tunnel  1h    # timeout to use with WebSocket and CONNECT

#enable resolving throught docker dns and avoid crashing if service is down while proxy is starting
resolvers docker_resolver
  nameserver dns 127.0.0.11:53


frontend stats
 bind *:8000
 stats enable
 stats hide-version
 stats uri /stats
 stats refresh 10s
 stats auth admin:HAPROXYSTAT_PASS


#listen mqtt
# bind *:1883
# mode tcp
# option clitcpka # For TCP keep-alive
# timeout client 3h
# timeout server 3h
# option tcplog
# balance leastconn
# server mqtt_servere_1 mosquitto:1883 check inter 5s resolvers docker_resolver resolve-prefer ipv4


frontend http
 bind *:80
 option forwardfor
 http-request add-header "X-Forwarded-Proto" "http"
 acl letsencrypt_http_acl path_beg /.well-known/acme-challenge/
 redirect scheme https if !letsencrypt_http_acl
 use_backend letsencrypt_http if letsencrypt_http_acl
 # default_backend db


frontend https
 bind *:443 ssl crt /usr/local/etc/haproxy/certs/
 option forwardfor
 http-request add-header "X-Forwarded-Proto" "https"
 
 acl main_domain       hdr(host) -i PLATFORM_FQDN
 acl tb_api_acl           path_beg /api/ /v2/ /v3/ /oauth2/ /login/oauth2/
 acl nrdapi_route         path_beg /nrdapi/
 
 use_backend be_one if main_domain !tb_api_acl !nrdapi_route
 use_backend be_two if main_domain tb_api_acl
 use_backend be_api if main_domain nrdapi_route
 #default_backend db



backend be_api
 server nr_api_server_1 nodered-api:1880 resolvers docker_resolver resolve-prefer ipv4


backend be_two
 server tbapi_1 app:8080 resolvers docker_resolver resolve-prefer ipv4
 http-request set-header X-Forwarded-Port %[dst_port]

backend be_one
 server tbp1 app-fe:80 resolvers docker_resolver resolve-prefer ipv4

backend letsencrypt_http
 server letsencrypt_http_server certbot:80 resolvers docker_resolver resolve-prefer ipv4
